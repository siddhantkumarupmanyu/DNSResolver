package sku.dnsresolver.ui;

import sku.dnsresolver.util.Announcer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainWindow extends JFrame implements UiListener {

    public static final String MAIN_WINDOW_NAME = "dns-Resolver";
    public static final String RESPONSE_TEXT_AREA = "response-text-area";
    public static final String DOMAIN_TEXTFIELD_NAME = "domain-name-textfield";
    public static final String SERVER_IP_COMBOBOX_NAME = "server-ip-combobox";
    public static final String SERVER_PORT_TEXTFIELD_NAME = "server-port-textfield";
    public static final String RESOLVE_BUTTON_NAME = "resolve-button";
    public static final String RECURSIVE_CHECKBOX_NAME = "recursive-checkbox";

    public JPanel rootPanel;
    private JPanel input_panel;
    private JPanel advanced_panel;
    private JScrollPane result_pane;

    private ExpandableResult expandable_result;

    public JTextField domain_name;
    public JTextField port;

    public JComboBox<String> dns_servers;
    public JButton resolve;

    public JCheckBox recursion_desired;

    private final Announcer<UserRequestListener> userRequests = Announcer.to(UserRequestListener.class);


    public MainWindow() {
        super("DNS Resolver");
        setUpFrame();
        setUpComponents();

        setVisible(true);
    }

    private void setUpFrame() {
        setName(MAIN_WINDOW_NAME);
        setContentPane(rootPanel);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setSize(450, 500);
        setLocationByPlatform(true);
    }

    @Override
    public void responseText(String text) {
        addResponse("Some Heading", text);
    }

    public void addUserRequestListener(UserRequestListener userRequestListener) {
        userRequests.addListener(userRequestListener);
    }

    private void setUpComponents() {
        domain_name.setName(DOMAIN_TEXTFIELD_NAME);
        dns_servers.setName(SERVER_IP_COMBOBOX_NAME);
        port.setName(SERVER_PORT_TEXTFIELD_NAME);
        recursion_desired.setName(RECURSIVE_CHECKBOX_NAME);

        resolve.setName(RESOLVE_BUTTON_NAME);

        resolve.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                userRequests.announce().resolve(domainName(), serverIp(), serverPort(), recursion());
            }

            private String domainName() {
                return domain_name.getText();
            }

            private String serverIp() {
                return (String) dns_servers.getSelectedItem();
            }

            private String serverPort() {
                return port.getText();
            }

            private boolean recursion() {
                return recursion_desired.isSelected();
            }

        });
    }

    public void addResponse(String heading, String result) {
        expandable_result.addItem(heading, result);
    }


    // Intelli Generated Code // Do not touch
    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        input_panel = new JPanel();
        input_panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(input_panel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, true));
        domain_name = new JTextField();
        domain_name.setHorizontalAlignment(11);
        input_panel.add(domain_name, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        dns_servers = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("1.1.1.1");
        defaultComboBoxModel1.addElement("8.8.8.8");
        defaultComboBoxModel1.addElement("8.8.8.4");
        defaultComboBoxModel1.addElement("127.0.0.1");
        dns_servers.setModel(defaultComboBoxModel1);
        input_panel.add(dns_servers, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        resolve = new JButton();
        resolve.setText("Resolve");
        input_panel.add(resolve, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        result_pane = new JScrollPane();
        rootPanel.add(result_pane, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        expandable_result = new ExpandableResult();
        result_pane.setViewportView(expandable_result);
        advanced_panel = new JPanel();
        advanced_panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(advanced_panel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        recursion_desired = new JCheckBox();
        recursion_desired.setSelected(true);
        recursion_desired.setText("Recursion Desired");
        advanced_panel.add(recursion_desired, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        advanced_panel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Port: ");
        advanced_panel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        port = new JTextField();
        port.setText("53");
        advanced_panel.add(port, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        label1.setLabelFor(port);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
